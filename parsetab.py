
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAFFECT AND DIVIDE FALSE FOR IF INF LACCOLADE LPAREN MINUS NAME NUMBER OR PLUS PRINT RACCOLADE RPAREN SEMICOLON SUP TIMES TRUE WHILEstart : blocbloc : bloc statement SEMICOLON \n    | statement SEMICOLONstatement : PRINT LPAREN expression RPARENstatement : NAME AFFECT expressionstatement : IF LPAREN expression RPAREN LACCOLADE bloc RACCOLADEstatement : WHILE LPAREN expression RPAREN LACCOLADE bloc RACCOLADEstatement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LACCOLADE bloc RACCOLADEexpression : expression PLUS expressionexpression : expression TIMES expressionexpression : expression MINUS expression\n\t\t\t\t| expression DIVIDE expression expression : expression AND expression  \n    | expression OR expression expression : expression INF expression\n\t\t\t\t| expression SUP expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : TRUEexpression : FALSE'
    
_lr_action_items = {'PRINT':([0,2,10,16,49,50,52,53,59,60,],[4,4,-3,-2,4,4,4,4,4,4,]),'NAME':([0,2,10,11,12,13,14,15,16,17,29,30,31,32,33,34,35,36,39,49,50,52,53,54,59,60,],[5,5,-3,20,20,20,20,20,-2,20,20,20,20,20,20,20,20,20,20,5,5,5,5,20,5,5,]),'IF':([0,2,10,16,49,50,52,53,59,60,],[6,6,-3,-2,6,6,6,6,6,6,]),'WHILE':([0,2,10,16,49,50,52,53,59,60,],[7,7,-3,-2,7,7,7,7,7,7,]),'FOR':([0,2,10,16,49,50,52,53,59,60,],[8,8,-3,-2,8,8,8,8,8,8,]),'$end':([1,2,10,16,],[0,-1,-3,-2,]),'SEMICOLON':([3,9,19,20,21,22,23,26,28,40,41,42,43,44,45,46,47,48,51,55,56,61,],[10,16,-18,-19,-20,-21,-5,39,-4,-17,-9,-10,-11,-12,-13,-14,-15,-16,54,-6,-7,-8,]),'LPAREN':([4,6,7,8,11,12,13,14,15,17,29,30,31,32,33,34,35,36,39,54,],[11,13,14,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'AFFECT':([5,],[12,]),'RACCOLADE':([10,16,52,53,60,],[-3,-2,55,56,61,]),'NUMBER':([11,12,13,14,15,17,29,30,31,32,33,34,35,36,39,54,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'TRUE':([11,12,13,14,15,17,29,30,31,32,33,34,35,36,39,54,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([11,12,13,14,15,17,29,30,31,32,33,34,35,36,39,54,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'RPAREN':([18,19,20,21,22,24,25,27,40,41,42,43,44,45,46,47,48,57,],[28,-18,-19,-20,-21,37,38,40,-17,-9,-10,-11,-12,-13,-14,-15,-16,58,]),'PLUS':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[29,-18,-19,-20,-21,29,29,29,29,29,-17,-9,-10,-11,-12,29,29,29,29,29,29,]),'TIMES':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[30,-18,-19,-20,-21,30,30,30,30,30,-17,30,-10,30,-12,30,30,30,30,30,30,]),'MINUS':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[31,-18,-19,-20,-21,31,31,31,31,31,-17,-9,-10,-11,-12,31,31,31,31,31,31,]),'DIVIDE':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[32,-18,-19,-20,-21,32,32,32,32,32,-17,32,-10,32,-12,32,32,32,32,32,32,]),'AND':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[33,-18,-19,-20,-21,33,33,33,33,33,-17,-9,-10,-11,-12,33,33,33,33,33,33,]),'OR':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[34,-18,-19,-20,-21,34,34,34,34,34,-17,-9,-10,-11,-12,34,34,34,34,34,34,]),'INF':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[35,-18,-19,-20,-21,35,35,35,35,35,-17,-9,-10,-11,-12,35,35,35,35,35,35,]),'SUP':([18,19,20,21,22,23,24,25,26,27,40,41,42,43,44,45,46,47,48,51,57,],[36,-18,-19,-20,-21,36,36,36,36,36,-17,-9,-10,-11,-12,36,36,36,36,36,36,]),'LACCOLADE':([37,38,58,],[49,50,59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'bloc':([0,49,50,59,],[2,52,53,60,]),'statement':([0,2,49,50,52,53,59,60,],[3,9,3,3,9,9,3,9,]),'expression':([11,12,13,14,15,17,29,30,31,32,33,34,35,36,39,54,],[18,23,24,25,26,27,41,42,43,44,45,46,47,48,51,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> bloc','start',1,'p_start','calcBase.py',81),
  ('bloc -> bloc statement SEMICOLON','bloc',3,'p_bloc','calcBase.py',89),
  ('bloc -> statement SEMICOLON','bloc',2,'p_bloc','calcBase.py',90),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_print','calcBase.py',98),
  ('statement -> NAME AFFECT expression','statement',3,'p_affect','calcBase.py',104),
  ('statement -> IF LPAREN expression RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_condition_if','calcBase.py',110),
  ('statement -> WHILE LPAREN expression RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_boucle_while','calcBase.py',114),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN LACCOLADE bloc RACCOLADE','statement',11,'p_boucle_for','calcBase.py',118),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop_plus','calcBase.py',123),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop_times','calcBase.py',127),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop_divide_and_minus','calcBase.py',131),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop_divide_and_minus','calcBase.py',132),
  ('expression -> expression AND expression','expression',3,'p_expression_binop_bool','calcBase.py',139),
  ('expression -> expression OR expression','expression',3,'p_expression_binop_bool','calcBase.py',140),
  ('expression -> expression INF expression','expression',3,'p_expression_binop_comparison','calcBase.py',147),
  ('expression -> expression SUP expression','expression',3,'p_expression_binop_comparison','calcBase.py',148),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcBase.py',156),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcBase.py',160),
  ('expression -> NAME','expression',1,'p_expression_name','calcBase.py',164),
  ('expression -> TRUE','expression',1,'p_expression_true','calcBase.py',171),
  ('expression -> FALSE','expression',1,'p_expression_false','calcBase.py',175),
]

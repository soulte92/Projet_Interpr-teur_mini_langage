
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAFFECT AND DIVIDE EQUALS FALSE FOR IF INF LACCOLADE LPAREN MINUS NAME NUMBER OR PLUS PRINT RACCOLADE RPAREN SEMICOLON SUP TIMES TRUE WHILEstart : blocbloc : bloc statement SEMICOLON \n    | statement SEMICOLONstatement : PRINT LPAREN expression RPARENstatement : NAME AFFECT expressionstatement : IF LPAREN expression RPAREN LACCOLADE bloc RACCOLADEstatement : WHILE LPAREN expression RPAREN LACCOLADE bloc RACCOLADEstatement : FOR LPAREN statement SEMICOLON expression SEMICOLON expression RPAREN LACCOLADE bloc RACCOLADEexpression : expression PLUS expressionexpression : expression TIMES expressionexpression : expression MINUS expression\n\t\t\t\t| expression DIVIDE expression expression : expression AND expression  \n    | expression OR expression expression : expression INF expression\n\t\t\t\t| expression SUP expressionexpression : expression EQUALS expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAMEexpression : TRUEexpression : FALSE'
    
_lr_action_items = {'PRINT':([0,2,10,15,16,51,52,54,55,61,62,],[4,4,-3,4,-2,4,4,4,4,4,4,]),'NAME':([0,2,10,11,12,13,14,15,16,17,29,30,31,32,33,34,35,36,37,40,51,52,54,55,56,61,62,],[5,5,-3,20,20,20,20,5,-2,20,20,20,20,20,20,20,20,20,20,20,5,5,5,5,20,5,5,]),'IF':([0,2,10,15,16,51,52,54,55,61,62,],[6,6,-3,6,-2,6,6,6,6,6,6,]),'WHILE':([0,2,10,15,16,51,52,54,55,61,62,],[7,7,-3,7,-2,7,7,7,7,7,7,]),'FOR':([0,2,10,15,16,51,52,54,55,61,62,],[8,8,-3,8,-2,8,8,8,8,8,8,]),'$end':([1,2,10,16,],[0,-1,-3,-2,]),'SEMICOLON':([3,9,19,20,21,22,23,26,28,41,42,43,44,45,46,47,48,49,50,53,57,58,63,],[10,16,-19,-20,-21,-22,-5,40,-4,-18,-9,-10,-11,-12,-13,-14,-15,-16,-17,56,-6,-7,-8,]),'LPAREN':([4,6,7,8,11,12,13,14,17,29,30,31,32,33,34,35,36,37,40,56,],[11,13,14,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'AFFECT':([5,],[12,]),'RACCOLADE':([10,16,54,55,62,],[-3,-2,57,58,63,]),'NUMBER':([11,12,13,14,17,29,30,31,32,33,34,35,36,37,40,56,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'TRUE':([11,12,13,14,17,29,30,31,32,33,34,35,36,37,40,56,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'FALSE':([11,12,13,14,17,29,30,31,32,33,34,35,36,37,40,56,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'RPAREN':([18,19,20,21,22,24,25,27,41,42,43,44,45,46,47,48,49,50,59,],[28,-19,-20,-21,-22,38,39,41,-18,-9,-10,-11,-12,-13,-14,-15,-16,-17,60,]),'PLUS':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[29,-19,-20,-21,-22,29,29,29,29,-18,-9,-10,-11,-12,29,29,29,29,29,29,29,]),'TIMES':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[30,-19,-20,-21,-22,30,30,30,30,-18,30,-10,30,-12,30,30,30,30,30,30,30,]),'MINUS':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[31,-19,-20,-21,-22,31,31,31,31,-18,-9,-10,-11,-12,31,31,31,31,31,31,31,]),'DIVIDE':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[32,-19,-20,-21,-22,32,32,32,32,-18,32,-10,32,-12,32,32,32,32,32,32,32,]),'AND':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[33,-19,-20,-21,-22,33,33,33,33,-18,-9,-10,-11,-12,33,33,33,33,33,33,33,]),'OR':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[34,-19,-20,-21,-22,34,34,34,34,-18,-9,-10,-11,-12,34,34,34,34,34,34,34,]),'INF':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[35,-19,-20,-21,-22,35,35,35,35,-18,-9,-10,-11,-12,35,35,35,35,35,35,35,]),'SUP':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[36,-19,-20,-21,-22,36,36,36,36,-18,-9,-10,-11,-12,36,36,36,36,36,36,36,]),'EQUALS':([18,19,20,21,22,23,24,25,27,41,42,43,44,45,46,47,48,49,50,53,59,],[37,-19,-20,-21,-22,37,37,37,37,-18,-9,-10,-11,-12,37,37,37,37,37,37,37,]),'LACCOLADE':([38,39,60,],[51,52,61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'bloc':([0,51,52,61,],[2,54,55,62,]),'statement':([0,2,15,51,52,54,55,61,62,],[3,9,26,3,3,9,9,3,9,]),'expression':([11,12,13,14,17,29,30,31,32,33,34,35,36,37,40,56,],[18,23,24,25,27,42,43,44,45,46,47,48,49,50,53,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> bloc','start',1,'p_start','calcBase.py',79),
  ('bloc -> bloc statement SEMICOLON','bloc',3,'p_bloc','calcBase.py',87),
  ('bloc -> statement SEMICOLON','bloc',2,'p_bloc','calcBase.py',88),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_print','calcBase.py',96),
  ('statement -> NAME AFFECT expression','statement',3,'p_affect','calcBase.py',102),
  ('statement -> IF LPAREN expression RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_condition_if','calcBase.py',107),
  ('statement -> WHILE LPAREN expression RPAREN LACCOLADE bloc RACCOLADE','statement',7,'p_boucle_while','calcBase.py',111),
  ('statement -> FOR LPAREN statement SEMICOLON expression SEMICOLON expression RPAREN LACCOLADE bloc RACCOLADE','statement',11,'p_boucle_for','calcBase.py',115),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop_plus','calcBase.py',120),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop_times','calcBase.py',124),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop_divide_and_minus','calcBase.py',128),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop_divide_and_minus','calcBase.py',129),
  ('expression -> expression AND expression','expression',3,'p_expression_binop_bool','calcBase.py',136),
  ('expression -> expression OR expression','expression',3,'p_expression_binop_bool','calcBase.py',137),
  ('expression -> expression INF expression','expression',3,'p_expression_binop_comparison','calcBase.py',144),
  ('expression -> expression SUP expression','expression',3,'p_expression_binop_comparison','calcBase.py',145),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop_equals','calcBase.py',152),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','calcBase.py',157),
  ('expression -> NUMBER','expression',1,'p_expression_number','calcBase.py',161),
  ('expression -> NAME','expression',1,'p_expression_name','calcBase.py',165),
  ('expression -> TRUE','expression',1,'p_expression_true','calcBase.py',169),
  ('expression -> FALSE','expression',1,'p_expression_false','calcBase.py',173),
]
